/*
   Copyright(c) 2020 Alain Royer.
   Email: aroyer.qc@gmail.com

   Permission is hereby granted, free of charge, to any person obtaining a copy of this software
   and associated documentation files (the "Software"), to deal in the Software without
   restriction, including without limitation the rights to use, copy, modify, merge, publish,
   distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all copies or
   substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
   INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
   AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
   DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "Utility.h"


// ************************************************************************************************
// *
// *  Slot
// *
// ************************************************************************************************

void MainWindow::on_ButtonBrowse_clicked()
{
    QString directory = QFileDialog::getExistingDirectory(this, tr("Find Images Files"), m_currentDir.absolutePath());

    if (!directory.isEmpty())
    {
        if(ui->ComboBoxDirectory->findText(directory) == -1)
        {
            ui->ComboBoxDirectory->addItem(directory);
        }
        ui->ComboBoxDirectory->setCurrentIndex(ui->ComboBoxDirectory->findText(directory));
    }
}

// ************************************************************************************************

void MainWindow::on_ComboBoxDirectory_currentIndexChanged(int index)
{
    Q_UNUSED(index);
    m_currentDir = QDir(ui->ComboBoxDirectory->currentText());
    SavePathToXML(m_currentDir.absolutePath());
    Find();
}

// ************************************************************************************************

void MainWindow::on_comboBoxPixelFormat_currentIndexChanged(int index)
{
    if(index == FORMAT_RGB565)        m_PixelFormatConverter = QImage::Format_RGB16;
    else if(index == FORMAT_ARGB8888) m_PixelFormatConverter = QImage::Format_ARGB32;

    if(index == FORMAT_FILE_DATA)
    {
       m_PixelFormatConverter = QImage::Format_Invalid;
       ui->comboBoxResize->setCurrentIndex(0);
       ui->comboBoxResize->setEnabled(false);
    }
    else
    {
       ui->comboBoxResize->setEnabled(true);
       ReloadImageConverter();
    }

}

// ************************************************************************************************

void MainWindow::on_comboBoxResize_currentIndexChanged(int index)
{
    Q_UNUSED(index);

    if(m_PixelFormatConverter != QImage::Format_Invalid)
    {
        ReloadImageConverter();
    }
}

// ************************************************************************************************

void MainWindow::on_ButtonConvert_clicked()
{
    on_TableFilesFound_cellActivated(ui->TableFilesFound->currentRow(), 0);
}

// ************************************************************************************************

void MainWindow::on_TableFilesFound_cellActivated(int row, int column)
{
    QTableWidgetItem* item = ui->TableFilesFound->item(row, 0);
    QString FileName = m_currentDir.absoluteFilePath(item->text());
    QFileInfo FileInfo(FileName);
    QString BaseName = FileInfo.baseName();                     // Get the file name without extension
    QString Temp;
    QString Format;
    int Index;
    qint8 BytePerPixel;

    Q_UNUSED(column);

    // Replace '-' or ' ' by '_' with regex
    QRegExp Regex("[- ]+");
    int s = -1;
    while((s = Regex.indexIn(BaseName, s + 1)) >= 0)
    {
        BaseName[s] = '_';
    }

    // Replace all numeric from the beginning of the name
    Regex.setPattern("[^0-9]+[_A-Za-z0-9]+");
    if((s = Regex.indexIn(BaseName, 0)) >= 0)
    {
        BaseName = Regex.cap(0);
    }

    // Stream data to file
    QFile File(BaseName + ".cpp");
    if(File.open(QIODevice::WriteOnly))
    {
        QTextStream Stream(&File);

        Stream << "//---------------------------------------------\r\n";
        Stream << "// This file was autogenerated by SkinAssembler\r\n";
        Stream << "//---------------------------------------------\r\n\r\n";

        // TODO user must provide a file to put his own include list
        Stream << "#include <stdint.h>\r\n";
        Stream << "#include \"digini_cfg.h\"\r\n";
        Stream << "#ifdef DIGINI_USE_GRAFX\r\n";
        Stream << "#include \"lib_grafx.h\"\r\n";
        Stream << "#include \"lib_compression.h\"\r\n\r\n";

        Index = ui->comboBoxPixelFormat->currentIndex();
        if(Index == FORMAT_RGB565)
        {
            Temp = QString("%1").arg(m_TotalCount / 2);
            Stream << "const uint16_t " << BaseName << "[" << Temp << "] =\r\n";
            this->Extract(&Stream, Index);
        }
        else if(Index == FORMAT_ARGB8888)
        {
            Temp = QString("%1").arg(m_TotalCount / 4);
            Stream << "const uint32_t " << BaseName << "[" << Temp << "] =\r\n";
            this->Extract(&Stream, Index);
        }
        else // if(Index == FORMAT_FILE_DATA)
        {
            Temp = QString("%1").arg(m_FileSize);
            Stream << "const uint8_t " << BaseName << "[" << Temp << "] =\r\n";
            this->BinToFile(&Stream, FileName);
        }


        Stream << "extern const StaticImageInfo_t SII_" << BaseName << ";\r\n";
        Stream << "const StaticImageInfo_t SII_" << BaseName << " =\r\n";
        Stream << "{\r\n";
        Temp.sprintf("%d", m_Scale.width());
        Stream << "    " << Temp << ",\r\n";
        Temp.sprintf("%d", m_Scale.height());
        Stream << "    " << Temp << ",\r\n";

        if(Index == FORMAT_RGB565)
        {
           Temp = QString("%1").arg(m_Scale.width() * 2);
           Stream << "    " << Temp << ",\r\n";
           Stream << "    16,\r\n";
           Stream << "    (uint8_t*)" << BaseName << ",\r\n";
           Temp = QString("%1").arg(m_TotalCount / 2);
           Stream << "    " << Temp << ",\r\n";
           Stream << "    RGB565,\r\n";
           Stream << "    COMPX_COMPRESSION_NONE,\r\n};\r\n\r\n";
        }
        else if(Index == FORMAT_ARGB8888)
        {
           Temp = QString("%1").arg(m_Scale.width() * 4);
           Stream << "    " << Temp << ",\r\n";
           Stream << "    32,\r\n";
           Stream << "    (uint8_t*)" << BaseName << ",\r\n";
           Temp = QString("%1").arg(m_TotalCount / 4);
           Stream << "    " << Temp << ",\r\n";
           Stream << "    ARGB8888,\r\n";
           Stream << "    COMPX_COMPRESSION_NONE,\r\n};\r\n\r\n";
        }
        else // FORMAT_FILE_DATA -> No Conversion
        {
           switch(m_pImage->format())
           {
               case QImage::Format_ARGB32:{ BytePerPixel = 4; Format = QString("ARGB8888"); break;}
               case QImage::Format_RGB16: { BytePerPixel = 2; Format = QString("RGB565");   break;}
               default:                   { BytePerPixel = 0; Format = QString("Unknown");  break;}
           }

           Temp = QString("%1").arg(m_Scale.width() * BytePerPixel);
           Stream << "    " << Temp << ",\r\n";
           Temp = QString("%1").arg(8 * BytePerPixel);
           Stream << "    " << Temp << ",\r\n";

           Stream << "    (uint8_t*)" << BaseName << ",\r\n";
           Temp = QString("%1").arg(m_FileSize);
           Stream << "    " << Temp << ",\r\n";
           Stream << "    " << Format << ",\r\n";
           if((FileInfo.completeSuffix().toUpper() == QString("JPG").toUpper()) ||
              (FileInfo.completeSuffix().toUpper() == QString("JPEG").toUpper()))
           {
              Stream << "    COMPX_JPEG,\r\n};\r\n\r\n";
           }
           else if(FileInfo.completeSuffix().toUpper() == QString("PNG").toUpper())
           {
              Stream << "    COMPX_PNG,\r\n};\r\n\r\n";
           }
        }

        Stream << "//-------------------------------------------------------------------------------------------------\r\n\r\n";
        Stream << "#endif // DIGINI_USE_GRAFX\r\n";


        File.close();
    }
}

// ************************************************************************************************

void MainWindow::on_TableFilesFound_currentCellChanged(int currentRow, int currentColumn, int previousRow, int previousColumn)
{
    Q_UNUSED(currentColumn);
    Q_UNUSED(previousRow);
    Q_UNUSED(previousColumn);
    if(currentRow >= 0)
    {
        ui->comboBoxResize->setEnabled(true);
        LoadImageConverter(currentRow, AUTO_FORMAT);
    }
}

// ************************************************************************************************

void MainWindow::on_TableFilesFound_cellClicked(int row, int column)
{
    Q_UNUSED(column);
    LoadImageConverter(row, AUTO_FORMAT);
}

// ************************************************************************************************

void MainWindow::on_horizontalScrollBarConverter_valueChanged(int value)
{
    int PosX = value / 100;
    int PosY = m_pPixmapItem->y();
    m_pPixmapItem->setPos(-PosX, PosY);
}

// ************************************************************************************************

void MainWindow::on_verticalScrollBarConverter_valueChanged(int value)
{
    int PosX = m_pPixmapItem->x();
    int PosY = value / 100;
    m_pPixmapItem->setPos(PosX, -PosY);
}

// ************************************************************************************************

void MainWindow::on_CheckerBoardSlider_sliderMoved(int position)
{
   ui->graphicsViewConverter->setStyleSheet(QString("background-color: #%1;").arg(position + (position << 8) + (position << 16), 6, 16, QChar('0')));
   CheckerPattern(&m_SceneConverter);
}

// ************************************************************************************************
// *
// *  Function
// *
// ************************************************************************************************

void MainWindow::InitConverter()
{
    m_pImage          = NULL;
    m_pProcessedImage = NULL;

    ui->ComboBoxDirectory->blockSignals(true);
    ui->ComboBoxDirectory->setCurrentText(m_currentDir.absolutePath());
    UpdateComboBox(ui->ComboBoxDirectory);
    ui->ComboBoxDirectory->blockSignals(false);
    Find();
}

// ************************************************************************************************

void MainWindow::ResetConverterGUI()
{
    ui->horizontalScrollBarConverter->setRange     (0, 0);
    ui->verticalScrollBarConverter->setRange       (0, 0);
    ui->horizontalScrollBarConverter->setSingleStep(0);
    ui->verticalScrollBarConverter->setSingleStep  (0);
    ui->comboBoxResize->setCurrentIndex(SCALE_FIT);
    ui->LabelNoteConverter->setVisible(false);
    ui->ButtonConvert->setDisabled(true);
    ui->LabelFilename->setText("");
    ui->LabelPixelFormat->setText("");
    ui->LabelSize->setText("");
    ClearTable(ui->TableFilesFound);
    ClearSceneConverter();
}

// ************************************************************************************************

void MainWindow::ClearSceneConverter()
{
    m_SceneConverter.clear();
    ui->graphicsViewConverter->setSceneRect(0, 0, m_DisplaySize.width(), m_DisplaySize.height());
    CheckerPattern(&m_SceneConverter);
    ui->graphicsViewConverter->setScene(&m_SceneConverter);
}

// ************************************************************************************************

void MainWindow::Find()
{
    QStringList files;
    QStringList filters;

    ResetConverterGUI();

    filters << "*.png" << "*.bmp" << "*.jpg";
    m_currentDir.setNameFilters(filters);

    files = m_currentDir.entryList(filters, QDir::Files | QDir::NoSymLinks);

    m_FileFound = files.size();
    m_SceneConverter.clear();

    ui->TableFilesFound->blockSignals(true);
    for(int i = 0; i < m_FileFound; ++i)
    {
        QFile file(m_currentDir.absoluteFilePath(files[i]));
        qint64 size = QFileInfo(file).size();

        QTableWidgetItem *fileNameItem = new QTableWidgetItem(files[i]);
        fileNameItem->setFlags(fileNameItem->flags() ^ Qt::ItemIsEditable);
        QTableWidgetItem *sizeItem = new QTableWidgetItem(PrintFileSize(size));
        sizeItem->setTextAlignment(Qt::AlignRight | Qt::AlignVCenter);
        sizeItem->setFlags(sizeItem->flags() ^ Qt::ItemIsEditable);

        ui->TableFilesFound->insertRow(i);
        ui->TableFilesFound->setItem(i, 0, fileNameItem);
        ui->TableFilesFound->setItem(i, 1, sizeItem);
    }
    ui->TableFilesFound->blockSignals(false);

    if(m_FileFound)
    {
        ui->LabelFilesFoundConverter->setText(tr("%1 file(s) found").arg(m_FileFound));
    }
    else
    {
        ui->LabelFilesFoundConverter->setText(tr("0 file found"));
    }
}

// ************************************************************************************************

void MainWindow::ReloadImageConverter()
{
    int row = ui->TableFilesFound->currentRow();
    if(row >= 0)
    {
        LoadImageConverter(row, RELOAD_FORMAT);
    }
}

// ************************************************************************************************

void MainWindow::LoadImageConverter(int row, eResizer Resizer)
{
    QTableWidgetItem *item;
    QString Filename;
    QString PathAndFilename;

    ui->ButtonConvert->setEnabled(true);
    item = ui->TableFilesFound->item(row, 0);
    Filename        = item->text();
    PathAndFilename = m_currentDir.absoluteFilePath(Filename);
    m_FileSize      = QFileInfo(PathAndFilename).size();

    if(m_pImage != NULL)
    {
        delete m_pImage;
        m_pImage = NULL;
    }

    m_pImage = new QImage();
    m_pImage->load(PathAndFilename);

    // Information that do not change if setting change
    ui->LabelFilename->setText(item->text());
    ui->LabelSize->setText(PrintSize(m_pImage->size()));

    if(Resizer == AUTO_FORMAT)
    {
        m_PixelFormatConverter = AutoSelectConversion(ui->comboBoxPixelFormat, m_pImage->format());
    }

    // Redraw Image
    QPoint  Point;
    QSize   Size;
    QImage* pResizedImage;

    ClearSceneConverter();

    pResizedImage = new QImage();
    ScaleToRequirement(m_pImage, pResizedImage, &m_DisplaySize, (eScaler)ui->comboBoxResize->currentIndex());

    if(m_pProcessedImage != NULL)
    {
        delete m_pProcessedImage;
        m_pProcessedImage = NULL;
    }

    m_pProcessedImage = new QImage();
    *m_pProcessedImage = pResizedImage->convertToFormat(m_PixelFormatConverter);
    delete pResizedImage;

    // Set the size for the image info
    m_Scale.setWidth((m_pProcessedImage->width()   > m_DisplaySize.width())  ? m_DisplaySize.width()  : m_pProcessedImage->width());
    m_Scale.setHeight((m_pProcessedImage->height() > m_DisplaySize.height()) ? m_DisplaySize.height() : m_pProcessedImage->height());

    m_TotalCount  = m_pProcessedImage->byteCount() / (m_pProcessedImage->width() * m_pProcessedImage->height());    // Adjust byte count to image size in viewport if it is the case
    m_TotalCount *= (m_Scale.width() * m_Scale.height());

    ui->LabelPixelFormat->setText(GetFormat(m_pImage->format()));
    ui->LabelDataSize->setText(QString("%1 Bytes").arg(m_TotalCount));                                              // Print updated value in information
    ui->LabelFileDataSize->setText(QString("%1 Bytes").arg(m_FileSize));
    ui->LabelScaleSize->setText(PrintSize(m_Scale));                                                                // Display viewport size

    // Set the size for the scene (minimum size is viewport)
    Size.setWidth ((m_pProcessedImage->width()  < m_DisplaySize.width())  ? m_DisplaySize.width()  : m_pProcessedImage->width());
    Size.setHeight((m_pProcessedImage->height() < m_DisplaySize.height()) ? m_DisplaySize.height() : m_pProcessedImage->height());

    if((Size.width()  > m_DisplaySize.width()) ||                                                                   // Display special note if image is bigger than viewport
       (Size.height() > m_DisplaySize.height()))
    {
        ui->LabelNoteConverter->setVisible(true);
    }
    else
    {
        ui->LabelNoteConverter->setVisible(false);
    }

    ui->horizontalScrollBarConverter->blockSignals(true);
    ui->verticalScrollBarConverter->blockSignals(true);
    ui->horizontalScrollBarConverter->setValue(0);
    ui->verticalScrollBarConverter->setValue(0);
    m_horizontalScrollRange = (m_pProcessedImage->size().width()  - m_DisplaySize.width())  * 100;
    m_verticalScrollRange   = (m_pProcessedImage->size().height() - m_DisplaySize.height()) * 100;
    ui->horizontalScrollBarConverter->setRange(0, m_horizontalScrollRange);
    ui->verticalScrollBarConverter->setRange  (0, m_verticalScrollRange);
    ui->horizontalScrollBarConverter->setSingleStep(m_horizontalScrollRange / 10);
    ui->verticalScrollBarConverter->setSingleStep  (m_verticalScrollRange / 10);
    ui->horizontalScrollBarConverter->blockSignals(false);
    ui->verticalScrollBarConverter->blockSignals(false);

    // Added image to the scene
    m_pPixmapItem = m_SceneConverter.addPixmap(QPixmap::fromImage(*m_pProcessedImage));                            // Add the image on top of the checker pattern
    Point = CenterPoint(m_pProcessedImage->size(), m_DisplaySize);
    m_pPixmapItem->setPos(Point);
}

// ************************************************************************************************

void MainWindow::Extract(QTextStream* pStream, int Index)
{
    QRgb Pixel;
    int X1;
    int Y1;
    int X2;
    int Y2;
    QString Temp;
    size_t Counter = 0;

    *pStream << "{\r\n    ";

    X1 = (ui->horizontalScrollBarConverter->value() / 100);
    Y1 = (ui->verticalScrollBarConverter->value() / 100);
    X2 = m_Scale.width()  + X1;
    Y2 = m_Scale.height() + Y1;

    for(int y = Y1; y < Y2; y++)
    {
        for(int x = X1; x < X2; x++)
        {
            Pixel = m_pProcessedImage->pixel(x, y);

            if(Index == FORMAT_RGB565)
            {
                uint16_t Value;

                Value  = (uint16_t)((Pixel >> 3) & 0x3F);
                Value |= (uint16_t)(((Pixel >> 19) & 0x1F) << 11);
                Value |= (uint16_t)(((Pixel >> 10)  & 0x3F)  << 5);
                Temp = QString("%1").arg(Value, 4, 16, QChar('0')).toUpper();

            }
            else if(Index == FORMAT_ARGB8888)
            {
                Temp = QString("%1").arg(Pixel, 8, 16, QChar('0')).toUpper();
            }
            *pStream << "0x" << Temp;

            if((size_t)((x + 1) * (y + 1)) < m_TotalCount)
            {
                *pStream << ", ";
                Counter++;
                if(Counter == 16)
                {
                    Counter = 0;
                    *pStream << endl << "    ";
                }
            }
        }
    }

    *pStream << "\r\n};\r\n\r\n\r\n";
}

// ************************************************************************************************

void MainWindow::BinToFile(QTextStream* pStream, QString FileName)
{
    qint64 i;
    qint64 Size;
    qint64 TotalCounter;
    qint64 Counter;
    quint8 Byte;
    QString Temp;

    TotalCounter = 0;
    Counter = 0;

    // Stream data to file
    QFile File(FileName);
    if(File.open(QIODevice::ReadOnly))
    {
        Size = File.size();
        *pStream << "{\r\n    ";

        for(i = 0; i < Size; i++)
        {
            TotalCounter++;
            File.getChar((char*)&Byte);
            Temp = QString("%1").arg(Byte, 2, 16, QChar('0')).toUpper();
            *pStream << "0x" << Temp;

            if(TotalCounter != Size)
            {
               *pStream << ",";
                Counter++;

                if(Counter == 16)
                {
                    Counter = 0;
                    *pStream << "\r\n    ";
                }
            }
        }
        File.close();
   }

    *pStream << "\r\n};\r\n\r\n\r\n";
}

// ************************************************************************************************

void MainWindow::AdjustTabConverter(QSize Offset, QRect ViewRect)
{
    // Resize Vertical line
    setWidgetSize(ui->line_V_Converter,             -1,                                     Offset.height() + 226);

    // Resize Horizontal Line
    setWidgetSize(ui->line_H_Converter,             Offset.width() + 20,                    -1);

    // Reposition Horizontal Line
    setWidgetXY(ui->line_H_Converter,               -1,                                     Offset.height() + 25);
    setWidgetXY(ui->line_H_Converter_2,             -1,                                     Offset.height() + 235);

    // Reposition Label
    setWidgetXY(ui->LabelStaticFileInfo,            -1,                                     Offset.height() + 35);
    setWidgetXY(ui->LabelStaticFilename,            -1,                                     Offset.height() + 65);
    setWidgetXY(ui->LabelFilename,                  -1,                                     Offset.height() + 65);
    setWidgetXY(ui->LabelStaticFileDataSize,        -1,                                     Offset.height() + 95);
    setWidgetXY(ui->LabelFileDataSize,              -1,                                     Offset.height() + 95);
    setWidgetXY(ui->LabelStaticDataSize,            -1,                                     Offset.height() + 125);
    setWidgetXY(ui->LabelDataSize,                  -1,                                     Offset.height() + 125);
    setWidgetXY(ui->LabelStaticResize,              Offset.width() + 472,                   Offset.height() + 125);
    setWidgetXY(ui->LabelStaticPixelFormat,         -1,                                     Offset.height() + 155);
    setWidgetXY(ui->LabelPixelFormat,               -1,                                     Offset.height() + 155);
    setWidgetXY(ui->LabelStaticSize,                -1,                                     Offset.height() + 185);
    setWidgetXY(ui->LabelSize,                      -1,                                     Offset.height() + 185);
    setWidgetXY(ui->LabelStaticScaleSize,           -1,                                     Offset.height() + 215);
    setWidgetXY(ui->LabelScaleSize,                 -1,                                     Offset.height() + 215);
    setWidgetXY(ui->LabelFilesFoundConverter,       -1,                                     Offset.height() + 202);
    setWidgetXY(ui->LabelNoteConverter,             Offset.width() + 450,                   Offset.height() + 35);

    // Reposition Button
    setWidgetXY(ui->ButtonConvert,                  -1,                                     Offset.height() + 200);

    // Reposition Checker color slider
    setWidgetXY(ui->LabelStaticCheckerColor,        Offset.width() + 480,                   Offset.height() + 95);
    setWidgetXY(ui->CheckerBoardSlider,             Offset.width() + 570,                   Offset.height() + 99);

    // Reposition ComboBox and static label
    setWidgetXY(ui->LabelStaticConvertTo,           Offset.width() + 480,                   Offset.height() + 127);
    setWidgetXY(ui->comboBoxPixelFormat,            Offset.width() + 570,                   Offset.height() + 125);
    setWidgetXY(ui->LabelStaticResize,              Offset.width() + 480,                   Offset.height() + 167);
    setWidgetXY(ui->comboBoxResize,                 Offset.width() + 570,                   Offset.height() + 165);
    setWidgetXY(ui->LabelStaticCompress,            Offset.width() + 480,                   Offset.height() + 207);
    setWidgetXY(ui->comboBoCompress,                Offset.width() + 570,                   Offset.height() + 205);

    // Resize Table
    setWidgetSize(ui->TableFilesFound,              -1,                                     Offset.height() + 125);

    // Resize ScrollBar
    setWidgetSize(ui->horizontalScrollBarConverter, ViewRect.width(),                       -1);
    setWidgetSize(ui->verticalScrollBarConverter,   -1,                                     ViewRect.height());

    // Reposition VerticalScrollBar
    setWidgetXY(ui->horizontalScrollBarConverter,   ViewRect.x(),                           ViewRect.y() + ViewRect.height() + 5);
    setWidgetXY(ui->verticalScrollBarConverter,     ViewRect.x() + ViewRect.width() + 5,    ViewRect.y());

    // Reset ScrollBar cursor
    ClearScrollBarValue();

    //Resize GraphicsView
    ui->graphicsViewConverter->setGeometry(ViewRect);
    ui->graphicsViewConverter->setStyleSheet(QString("background-color: #%1;").arg(0, 6, 16, QChar('0')));
    ui->graphicsViewImage->setSceneRect(0, 0, ViewRect.width(), ViewRect.height());
    ui->graphicsViewImage->setStyleSheet(QString("background-color: #%1;").arg(0, 6, 16, QChar('0')));

    Find();
}

// ************************************************************************************************

void MainWindow::ClearScrollBarValue()
{
    ui->horizontalScrollBarConverter->blockSignals(true);
    ui->horizontalScrollBarConverter->setValue(0);
    ui->horizontalScrollBarConverter->blockSignals(false);
    ui->verticalScrollBarConverter->blockSignals(true);
    ui->verticalScrollBarConverter->setValue(0);
    ui->verticalScrollBarConverter->blockSignals(false);
}
